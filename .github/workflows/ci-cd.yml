name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Run tests
      run: yarn test
    
    - name: Build frontend
      run: yarn build

  docker-build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build and push backend images
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/gpt-oss-mcp-server:latest
        build-args: |
          BUILDKIT_INLINE_CACHE=1
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: .
        dockerfile: Dockerfile.frontend
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/gpt-oss-frontend:latest
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Build and push marketplace image
      uses: docker/build-push-action@v4
      with:
        context: .
        dockerfile: Dockerfile.marketplace
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/gpt-oss-marketplace:latest
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  deploy:
    needs: docker-build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
    
    - name: Deploy to production
      env:
        SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan $REMOTE_HOST >> ~/.ssh/known_hosts
        
        # Copy compose file and deploy
        scp docker-compose.yml $REMOTE_USER@$REMOTE_HOST:~/gpt-oss/
        ssh $REMOTE_USER@$REMOTE_HOST "cd ~/gpt-oss && docker-compose pull && docker-compose up -d"